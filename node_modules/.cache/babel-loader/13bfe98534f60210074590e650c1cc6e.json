{"ast":null,"code":"import _objectSpread from \"/home/elkimza/Documents/KYC_Hashing/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// Styles\nimport \"../../../src/components/VOverflowBtn/VOverflowBtn.sass\"; // Extensions\n\nimport VSelect from '../VSelect/VSelect';\nimport VAutocomplete from '../VAutocomplete';\nimport VTextField from '../VTextField/VTextField'; // Components\n\nimport VBtn from '../VBtn'; // Utilities\n\nimport { consoleWarn } from '../../util/console';\n/* @vue/component */\n\nexport default VAutocomplete.extend({\n  name: 'v-overflow-btn',\n  props: {\n    editable: Boolean,\n    segmented: Boolean\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, VAutocomplete.options.computed.classes.call(this)), {}, {\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable\n      });\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return this.editable || VAutocomplete.options.computed.isAnyValueAllowed.call(this);\n    },\n    isSingle: function isSingle() {\n      return true;\n    },\n    computedItems: function computedItems() {\n      return this.segmented ? this.allItems : this.filteredItems;\n    },\n    labelValue: function labelValue() {\n      return this.isFocused && !this.persistentPlaceholder || this.isLabelActive;\n    }\n  },\n  methods: {\n    genSelections: function genSelections() {\n      return this.editable ? VAutocomplete.options.methods.genSelections.call(this) : VSelect.options.methods.genSelections.call(this); // Override v-autocomplete's override\n    },\n    genCommaSelection: function genCommaSelection(item, index, last) {\n      return this.segmented ? this.genSegmentedBtn(item) : VSelect.options.methods.genCommaSelection.call(this, item, index, last);\n    },\n    genInput: function genInput() {\n      var input = VTextField.options.methods.genInput.call(this);\n      input.data = input.data || {};\n      input.data.domProps.value = this.editable ? this.internalSearch : '';\n      input.data.attrs.readonly = !this.isAnyValueAllowed;\n      return input;\n    },\n    genLabel: function genLabel() {\n      if (this.editable && this.isFocused) return null;\n      var label = VTextField.options.methods.genLabel.call(this);\n      if (!label) return label;\n      label.data = label.data || {}; // Reset previously set styles from parent\n\n      label.data.style = {};\n      return label;\n    },\n    genSegmentedBtn: function genSegmentedBtn(item) {\n      var _this = this;\n\n      var itemValue = this.getValue(item);\n      var itemObj = this.computedItems.find(function (i) {\n        return _this.getValue(i) === itemValue;\n      }) || item;\n\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \"segmented\" prop without a selection slot, items must contain both a text and callback property', this);\n        return null;\n      }\n\n      return this.$createElement(VBtn, {\n        props: {\n          text: true\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            itemObj.callback(e);\n          }\n        }\n      }, [itemObj.text]);\n    },\n    updateValue: function updateValue(val) {\n      if (val) {\n        this.initialValue = this.lazyValue;\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue);\n      }\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["VSelect","VAutocomplete","VTextField","VBtn","consoleWarn","extend","name","props","editable","Boolean","segmented","computed","classes","options","call","isAnyValueAllowed","isSingle","computedItems","allItems","filteredItems","labelValue","isFocused","persistentPlaceholder","isLabelActive","methods","genSelections","genCommaSelection","item","index","last","genSegmentedBtn","genInput","input","data","domProps","value","internalSearch","attrs","readonly","genLabel","label","style","itemValue","getValue","itemObj","find","i","text","callback","$createElement","on","click","e","stopPropagation","updateValue","val","initialValue","lazyValue","$emit"],"sourceRoot":"","sources":["../../../src/components/VOverflowBtn/VOverflowBtn.ts"],"sourcesContent":["// Styles\nimport './VOverflowBtn.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete'\nimport VTextField from '../VTextField/VTextField'\n\n// Components\nimport VBtn from '../VBtn'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-overflow-btn',\n\n  props: {\n    editable: Boolean,\n    segmented: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VAutocomplete.options.computed.classes.call(this),\n        'v-overflow-btn': true,\n        'v-overflow-btn--segmented': this.segmented,\n        'v-overflow-btn--editable': this.editable,\n      }\n    },\n    isAnyValueAllowed (): boolean {\n      return this.editable ||\n        VAutocomplete.options.computed.isAnyValueAllowed.call(this)\n    },\n    isSingle (): true {\n      return true\n    },\n    computedItems (): object[] {\n      return this.segmented ? this.allItems : this.filteredItems\n    },\n    labelValue (): boolean {\n      return (this.isFocused && !this.persistentPlaceholder) || this.isLabelActive\n    },\n  },\n\n  methods: {\n    genSelections () {\n      return this.editable\n        ? VAutocomplete.options.methods.genSelections.call(this)\n        : VSelect.options.methods.genSelections.call(this) // Override v-autocomplete's override\n    },\n    genCommaSelection (item: any, index: number, last: boolean) {\n      return this.segmented\n        ? this.genSegmentedBtn(item)\n        : VSelect.options.methods.genCommaSelection.call(this, item, index, last)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = input.data || {}\n      input.data.domProps!.value = this.editable ? this.internalSearch : ''\n      input.data.attrs!.readonly = !this.isAnyValueAllowed\n\n      return input\n    },\n    genLabel () {\n      if (this.editable && this.isFocused) return null\n\n      const label = VTextField.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label.data = label.data || {}\n\n      // Reset previously set styles from parent\n      label.data.style = {}\n\n      return label\n    },\n    genSegmentedBtn (item: any) {\n      const itemValue = this.getValue(item)\n      const itemObj = this.computedItems.find(i => this.getValue(i) === itemValue) || item\n\n      if (!itemObj.text || !itemObj.callback) {\n        consoleWarn('When using \"segmented\" prop without a selection slot, items must contain both a text and callback property', this)\n        return null\n      }\n\n      return this.$createElement(VBtn, {\n        props: { text: true },\n        on: {\n          click (e: Event) {\n            e.stopPropagation()\n            itemObj.callback(e)\n          },\n        },\n      }, [itemObj.text])\n    },\n    updateValue (val: boolean) {\n      if (val) {\n        this.initialValue = this.lazyValue\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue)\n      }\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}