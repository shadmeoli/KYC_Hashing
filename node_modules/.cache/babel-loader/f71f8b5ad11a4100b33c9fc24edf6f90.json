{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'translatable',\n  props: {\n    height: Number\n  },\n  data: function data() {\n    return {\n      elOffsetTop: 0,\n      parallax: 0,\n      parallaxDist: 0,\n      percentScrolled: 0,\n      scrollTop: 0,\n      windowHeight: 0,\n      windowBottom: 0\n    };\n  },\n  computed: {\n    imgHeight: function imgHeight() {\n      return this.objHeight();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('scroll', this.translate, false);\n    window.removeEventListener('resize', this.translate, false);\n  },\n  methods: {\n    calcDimensions: function calcDimensions() {\n      var offset = this.$el.getBoundingClientRect();\n      this.scrollTop = window.pageYOffset;\n      this.parallaxDist = this.imgHeight - this.height;\n      this.elOffsetTop = offset.top + this.scrollTop;\n      this.windowHeight = window.innerHeight;\n      this.windowBottom = this.scrollTop + this.windowHeight;\n    },\n    listeners: function listeners() {\n      window.addEventListener('scroll', this.translate, false);\n      window.addEventListener('resize', this.translate, false);\n    },\n\n    /** @abstract **/\n    objHeight: function objHeight() {\n      throw new Error('Not implemented !');\n    },\n    translate: function translate() {\n      this.calcDimensions();\n      this.percentScrolled = (this.windowBottom - this.elOffsetTop) / (parseInt(this.height) + this.windowHeight);\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled);\n    }\n  }\n});","map":{"version":3,"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,eAAeA,GAAG,CAACC,MAAJ,CAAW;EACxBC,IAAI,EAAE,cADkB;EAGxBC,KAAK,EAAE;IACLC,MAAM,EAAEC;EADH,CAHiB;EAOxBC,IAAI,EAAE;IAAA,OAAO;MACXC,WAAW,EAAE,CADF;MAEXC,QAAQ,EAAE,CAFC;MAGXC,YAAY,EAAE,CAHH;MAIXC,eAAe,EAAE,CAJN;MAKXC,SAAS,EAAE,CALA;MAMXC,YAAY,EAAE,CANH;MAOXC,YAAY,EAAE;IAPH,CAAP;EAAA,CAPkB;EAiBxBC,QAAQ,EAAE;IACRC,SADQ,uBACC;MACP,OAAO,KAAKC,SAAL,EAAP;IACD;EAHO,CAjBc;EAuBxBC,aAvBwB,2BAuBX;IACXC,MAAM,CAACC,mBAAP,CAA2B,QAA3B,EAAqC,KAAKC,SAA1C,EAAqD,KAArD;IACAF,MAAM,CAACC,mBAAP,CAA2B,QAA3B,EAAqC,KAAKC,SAA1C,EAAqD,KAArD;EAzBsB;EA4BxBC,OAAO,EAAE;IACPC,cADO,4BACO;MACZ,IAAMC,MAAM,GAAG,KAAKC,GAAL,CAASC,qBAAT,EAAf;MAEA,KAAKd,SAAL,GAAiBO,MAAM,CAACQ,WAAxB;MACA,KAAKjB,YAAL,GAAoB,KAAKM,SAAL,GAAiB,KAAKX,MAA1C;MACA,KAAKG,WAAL,GAAmBgB,MAAM,CAACI,GAAP,GAAa,KAAKhB,SAArC;MACA,KAAKC,YAAL,GAAoBM,MAAM,CAACU,WAA3B;MACA,KAAKf,YAAL,GAAoB,KAAKF,SAAL,GAAiB,KAAKC,YAA1C;IARK;IAUPiB,SAVO,uBAUE;MACPX,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkC,KAAKV,SAAvC,EAAkD,KAAlD;MACAF,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkC,KAAKV,SAAvC,EAAkD,KAAlD;IAZK;;IAcP;IACAJ,SAfO,uBAeE;MACP,MAAM,IAAIe,KAAJ,CAAU,mBAAV,CAAN;IAhBK;IAkBPX,SAlBO,uBAkBE;MACP,KAAKE,cAAL;MAEA,KAAKZ,eAAL,GACE,CAAC,KAAKG,YAAL,GAAoB,KAAKN,WAA1B,KACCyB,QAAQ,CAAC,KAAK5B,MAAN,CAAR,GAAwB,KAAKQ,YAD9B,CADF;MAKA,KAAKJ,QAAL,GAAgByB,IAAI,CAACC,KAAL,CAAW,KAAKzB,YAAL,GAAoB,KAAKC,eAApC,CAAhB;IACD;EA3BM;AA5Be,CAAX,CAAf","names":["Vue","extend","name","props","height","Number","data","elOffsetTop","parallax","parallaxDist","percentScrolled","scrollTop","windowHeight","windowBottom","computed","imgHeight","objHeight","beforeDestroy","window","removeEventListener","translate","methods","calcDimensions","offset","$el","getBoundingClientRect","pageYOffset","top","innerHeight","listeners","addEventListener","Error","parseInt","Math","round"],"sourceRoot":"","sources":["../../../src/mixins/translatable/index.ts"],"sourcesContent":["import Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'translatable',\n\n  props: {\n    height: Number,\n  },\n\n  data: () => ({\n    elOffsetTop: 0,\n    parallax: 0,\n    parallaxDist: 0,\n    percentScrolled: 0,\n    scrollTop: 0,\n    windowHeight: 0,\n    windowBottom: 0,\n  }),\n\n  computed: {\n    imgHeight (): number {\n      return this.objHeight()\n    },\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('scroll', this.translate, false)\n    window.removeEventListener('resize', this.translate, false)\n  },\n\n  methods: {\n    calcDimensions () {\n      const offset = this.$el.getBoundingClientRect()\n\n      this.scrollTop = window.pageYOffset\n      this.parallaxDist = this.imgHeight - this.height\n      this.elOffsetTop = offset.top + this.scrollTop\n      this.windowHeight = window.innerHeight\n      this.windowBottom = this.scrollTop + this.windowHeight\n    },\n    listeners () {\n      window.addEventListener('scroll', this.translate, false)\n      window.addEventListener('resize', this.translate, false)\n    },\n    /** @abstract **/\n    objHeight (): number {\n      throw new Error('Not implemented !')\n    },\n    translate () {\n      this.calcDimensions()\n\n      this.percentScrolled = (\n        (this.windowBottom - this.elOffsetTop) /\n        (parseInt(this.height) + this.windowHeight)\n      )\n\n      this.parallax = Math.round(this.parallaxDist * this.percentScrolled)\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}