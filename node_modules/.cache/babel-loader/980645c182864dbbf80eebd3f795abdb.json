{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { checkCollinear, getDistance, moveTo } from './math';\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\n\nexport function genPath(points, radius) {\n  var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 75;\n  var start = points.shift();\n  var end = points[points.length - 1];\n  return (fill ? \"M\".concat(start.x, \" \").concat(height - start.x + 2, \" L\").concat(start.x, \" \").concat(start.y) : \"M\".concat(start.x, \" \").concat(start.y)) + points.map(function (point, index) {\n    var next = points[index + 1];\n    var prev = points[index - 1] || start;\n    var isCollinear = next && checkCollinear(next, point, prev);\n\n    if (!next || isCollinear) {\n      return \"L\".concat(point.x, \" \").concat(point.y);\n    }\n\n    var threshold = Math.min(getDistance(prev, point), getDistance(next, point));\n    var isTooCloseForRadius = threshold / 2 < radius;\n    var radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;\n    var before = moveTo(prev, point, radiusForPoint);\n    var after = moveTo(next, point, radiusForPoint);\n    return \"L\".concat(before.x, \" \").concat(before.y, \"S\").concat(point.x, \" \").concat(point.y, \" \").concat(after.x, \" \").concat(after.y);\n  }).join('') + (fill ? \"L\".concat(end.x, \" \").concat(height - start.x + 2, \" Z\") : '');\n}","map":{"version":3,"mappings":";;;AACA,SAASA,cAAT,EAAyBC,WAAzB,EAAsCC,MAAtC,QAAoD,QAApD;AAEA;;AAEG;;AACH,OAAM,SAAUC,OAAV,CAAmBC,MAAnB,EAAoCC,MAApC,EAA6E;EAAA,IAAzBC,IAAyB,uEAAlB,KAAkB;EAAA,IAAXC,MAAW,uEAAF,EAAE;EACjF,IAAMC,KAAK,GAAGJ,MAAM,CAACK,KAAP,EAAd;EACA,IAAMC,GAAG,GAAGN,MAAM,CAACA,MAAM,CAACO,MAAP,GAAgB,CAAjB,CAAlB;EAEA,OACE,CAACL,IAAI,cAAOE,KAAK,CAACI,CAAb,cAAkBL,MAAM,GAAGC,KAAK,CAACI,CAAf,GAAmB,CAArC,eAA2CJ,KAAK,CAACI,CAAjD,cAAsDJ,KAAK,CAACK,CAA5D,eAAsEL,KAAK,CAACI,CAA5E,cAAiFJ,KAAK,CAACK,CAAvF,CAAL,IACAT,MAAM,CACHU,GADH,CACO,UAACC,KAAD,EAAQC,KAAR,EAAiB;IACpB,IAAMC,IAAI,GAAGb,MAAM,CAACY,KAAK,GAAG,CAAT,CAAnB;IACA,IAAME,IAAI,GAAGd,MAAM,CAACY,KAAK,GAAG,CAAT,CAAN,IAAqBR,KAAlC;IACA,IAAMW,WAAW,GAAGF,IAAI,IAAIjB,cAAc,CAACiB,IAAD,EAAOF,KAAP,EAAcG,IAAd,CAA1C;;IAEA,IAAI,CAACD,IAAD,IAASE,WAAb,EAA0B;MACxB,kBAAWJ,KAAK,CAACH,CAAjB,cAAsBG,KAAK,CAACF,CAA5B;IACD;;IAED,IAAMO,SAAS,GAAGC,IAAI,CAACC,GAAL,CAChBrB,WAAW,CAACiB,IAAD,EAAOH,KAAP,CADK,EAEhBd,WAAW,CAACgB,IAAD,EAAOF,KAAP,CAFK,CAAlB;IAIA,IAAMQ,mBAAmB,GAAGH,SAAS,GAAG,CAAZ,GAAgBf,MAA5C;IACA,IAAMmB,cAAc,GAAGD,mBAAmB,GAAGH,SAAS,GAAG,CAAf,GAAmBf,MAA7D;IAEA,IAAMoB,MAAM,GAAGvB,MAAM,CAACgB,IAAD,EAAOH,KAAP,EAAcS,cAAd,CAArB;IACA,IAAME,KAAK,GAAGxB,MAAM,CAACe,IAAD,EAAOF,KAAP,EAAcS,cAAd,CAApB;IAEA,kBAAWC,MAAM,CAACb,CAAlB,cAAuBa,MAAM,CAACZ,CAA9B,cAAmCE,KAAK,CAACH,CAAzC,cAA8CG,KAAK,CAACF,CAApD,cAAyDa,KAAK,CAACd,CAA/D,cAAoEc,KAAK,CAACb,CAA1E;EApBJ,GAsBGc,IAtBH,CAsBQ,EAtBR,CADA,IAwBCrB,IAAI,cAAOI,GAAG,CAACE,CAAX,cAAgBL,MAAM,GAAGC,KAAK,CAACI,CAAf,GAAmB,CAAnC,UAA2C,EAxBhD,CADF;AA2BD","names":["checkCollinear","getDistance","moveTo","genPath","points","radius","fill","height","start","shift","end","length","x","y","map","point","index","next","prev","isCollinear","threshold","Math","min","isTooCloseForRadius","radiusForPoint","before","after","join"],"sourceRoot":"","sources":["../../../../src/components/VSparkline/helpers/path.ts"],"sourcesContent":["import { Point } from '../VSparkline'\nimport { checkCollinear, getDistance, moveTo } from './math'\n\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\n  const start = points.shift()!\n  const end = points[points.length - 1]\n\n  return (\n    (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\n    points\n      .map((point, index) => {\n        const next = points[index + 1]\n        const prev = points[index - 1] || start\n        const isCollinear = next && checkCollinear(next, point, prev)\n\n        if (!next || isCollinear) {\n          return `L${point.x} ${point.y}`\n        }\n\n        const threshold = Math.min(\n          getDistance(prev, point),\n          getDistance(next, point)\n        )\n        const isTooCloseForRadius = threshold / 2 < radius\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\n\n        const before = moveTo(prev, point, radiusForPoint)\n        const after = moveTo(next, point, radiusForPoint)\n\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\n      })\n      .join('') +\n    (fill ? `L${end.x} ${height - start.x + 2} Z` : '')\n  )\n}\n"]},"metadata":{},"sourceType":"module"}