{"ast":null,"code":"import _objectSpread from \"/home/elkimza/Documents/KYC_Hashing/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// Mixins\nimport Measurable from '../../mixins/measurable';\nimport Toggleable from '../../mixins/toggleable'; // Directives\n\nimport intersect from '../../directives/intersect'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot } from '../../util/helpers';\nexport default mixins(Measurable, Toggleable).extend({\n  name: 'VLazy',\n  directives: {\n    intersect: intersect\n  },\n  props: {\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      \"default\": function _default() {\n        return {\n          root: undefined,\n          rootMargin: undefined,\n          threshold: undefined\n        };\n      }\n    },\n    tag: {\n      type: String,\n      \"default\": 'div'\n    },\n    transition: {\n      type: String,\n      \"default\": 'fade-transition'\n    }\n  },\n  computed: {\n    styles: function styles() {\n      return _objectSpread({}, this.measurableStyles);\n    }\n  },\n  methods: {\n    genContent: function genContent() {\n      var children = this.isActive && getSlot(this);\n      return this.transition ? this.$createElement('transition', {\n        props: {\n          name: this.transition\n        }\n      }, children) : children;\n    },\n    onObserve: function onObserve(entries, observer, isIntersecting) {\n      if (this.isActive) return;\n      this.isActive = isIntersecting;\n    }\n  },\n  render: function render(h) {\n    return h(this.tag, {\n      staticClass: 'v-lazy',\n      attrs: this.$attrs,\n      directives: [{\n        name: 'intersect',\n        value: {\n          handler: this.onObserve,\n          options: this.options\n        }\n      }],\n      on: this.$listeners,\n      style: this.styles\n    }, [this.genContent()]);\n  }\n});","map":{"version":3,"mappings":";AAAA;AACA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,4BAAtB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAMA,eAAeD,MAAM,CACnBH,UADmB,EAEnBC,UAFmB,CAAN,CAGbI,MAHa,CAGN;EACPC,IAAI,EAAE,OADC;EAGPC,UAAU,EAAE;IAAEL;EAAF,CAHL;EAKPM,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MADC;MAEP;MACA;MACA,WAAS;QAAA,OAAO;UACdC,IAAI,EAAEC,SADQ;UAEdC,UAAU,EAAED,SAFE;UAGdE,SAAS,EAAEF;QAHG,CAAP;MAAA;IAJF,CADJ;IAWLG,GAAG,EAAE;MACHN,IAAI,EAAEO,MADH;MAEH,WAAS;IAFN,CAXA;IAeLC,UAAU,EAAE;MACVR,IAAI,EAAEO,MADI;MAEV,WAAS;IAFC;EAfP,CALA;EA0BPE,QAAQ,EAAE;IACRC,MADQ,oBACF;MACJ,yBACK,KAAKC,gBADV;IAGD;EALO,CA1BH;EAkCPC,OAAO,EAAE;IACPC,UADO,wBACG;MACR,IAAMC,QAAQ,GAAG,KAAKC,QAAL,IAAiBrB,OAAO,CAAC,IAAD,CAAzC;MAEA,OAAO,KAAKc,UAAL,GACH,KAAKQ,cAAL,CAAoB,YAApB,EAAkC;QAClClB,KAAK,EAAE;UAAEF,IAAI,EAAE,KAAKY;QAAb;MAD2B,CAAlC,EAECM,QAFD,CADG,GAIHA,QAJJ;IAJK;IAUPG,SAVO,qBAWLC,OAXK,EAYLC,QAZK,EAaLC,cAbK,EAakB;MAEvB,IAAI,KAAKL,QAAT,EAAmB;MAEnB,KAAKA,QAAL,GAAgBK,cAAhB;IACD;EAlBM,CAlCF;EAuDPC,MAvDO,kBAuDCC,CAvDD,EAuDE;IACP,OAAOA,CAAC,CAAC,KAAKhB,GAAN,EAAW;MACjBiB,WAAW,EAAE,QADI;MAEjBC,KAAK,EAAE,KAAKC,MAFK;MAGjB5B,UAAU,EAAE,CAAC;QACXD,IAAI,EAAE,WADK;QAEX8B,KAAK,EAAE;UACLC,OAAO,EAAE,KAAKV,SADT;UAELlB,OAAO,EAAE,KAAKA;QAFT;MAFI,CAAD,CAHK;MAUjB6B,EAAE,EAAE,KAAKC,UAVQ;MAWjBC,KAAK,EAAE,KAAKpB;IAXK,CAAX,EAYL,CAAC,KAAKG,UAAL,EAAD,CAZK,CAAR;EAaD;AArEM,CAHM,CAAf","names":["Measurable","Toggleable","intersect","mixins","getSlot","extend","name","directives","props","options","type","Object","root","undefined","rootMargin","threshold","tag","String","transition","computed","styles","measurableStyles","methods","genContent","children","isActive","$createElement","onObserve","entries","observer","isIntersecting","render","h","staticClass","attrs","$attrs","value","handler","on","$listeners","style"],"sourceRoot":"","sources":["../../../src/components/VLazy/VLazy.ts"],"sourcesContent":["// Mixins\nimport Measurable from '../../mixins/measurable'\nimport Toggleable from '../../mixins/toggleable'\n\n// Directives\nimport intersect from '../../directives/intersect'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { getSlot } from '../../util/helpers'\n\n// Types\nimport { VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nexport default mixins(\n  Measurable,\n  Toggleable\n).extend({\n  name: 'VLazy',\n\n  directives: { intersect },\n\n  props: {\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: () => ({\n        root: undefined,\n        rootMargin: undefined,\n        threshold: undefined,\n      }),\n    } as PropValidator<IntersectionObserverInit>,\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    transition: {\n      type: String,\n      default: 'fade-transition',\n    },\n  },\n\n  computed: {\n    styles (): object {\n      return {\n        ...this.measurableStyles,\n      }\n    },\n  },\n\n  methods: {\n    genContent () {\n      const children = this.isActive && getSlot(this)\n\n      return this.transition\n        ? this.$createElement('transition', {\n          props: { name: this.transition },\n        }, children)\n        : children\n    },\n    onObserve (\n      entries: IntersectionObserverEntry[],\n      observer: IntersectionObserver,\n      isIntersecting: boolean,\n    ) {\n      if (this.isActive) return\n\n      this.isActive = isIntersecting\n    },\n  },\n\n  render (h): VNode {\n    return h(this.tag, {\n      staticClass: 'v-lazy',\n      attrs: this.$attrs,\n      directives: [{\n        name: 'intersect',\n        value: {\n          handler: this.onObserve,\n          options: this.options,\n        },\n      }],\n      on: this.$listeners,\n      style: this.styles,\n    }, [this.genContent()])\n  },\n})\n"]},"metadata":{},"sourceType":"module"}