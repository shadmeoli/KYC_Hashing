{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\n// Directives\nimport { Scroll } from '../../directives'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'scrollable',\n  directives: {\n    Scroll: Scroll\n  },\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number]\n  },\n  data: function data() {\n    return {\n      currentScroll: 0,\n      currentThreshold: 0,\n      isActive: false,\n      isScrollingUp: false,\n      previousScroll: 0,\n      savedScroll: 0,\n      target: null\n    };\n  },\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll: function canScroll() {\n      return typeof window !== 'undefined';\n    },\n\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold: function computedScrollThreshold() {\n      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;\n    }\n  },\n  watch: {\n    isScrollingUp: function isScrollingUp() {\n      this.savedScroll = this.savedScroll || this.currentScroll;\n    },\n    isActive: function isActive() {\n      this.savedScroll = 0;\n    }\n  },\n  mounted: function mounted() {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget);\n\n      if (!this.target) {\n        consoleWarn(\"Unable to locate element with identifier \".concat(this.scrollTarget), this);\n      }\n    }\n  },\n  methods: {\n    onScroll: function onScroll() {\n      var _this = this;\n\n      if (!this.canScroll) return;\n      this.previousScroll = this.currentScroll;\n      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;\n      this.isScrollingUp = this.currentScroll < this.previousScroll;\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);\n      this.$nextTick(function () {\n        if (Math.abs(_this.currentScroll - _this.savedScroll) > _this.computedScrollThreshold) _this.thresholdMet();\n      });\n    },\n\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet: function thresholdMet() {}\n  }\n});","map":{"version":3,"mappings":";AAAA;AACA,SAASA,MAAT,QAAuB,kBAAvB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,oBAA5B,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA;;;;;;;AAOG;;AACH;;AACA,eAAeA,GAAG,CAACC,MAAJ,CAAW;EACxBC,IAAI,EAAE,YADkB;EAGxBC,UAAU,EAAE;IAAEL;EAAF,CAHY;EAKxBM,KAAK,EAAE;IACLC,YAAY,EAAEC,MADT;IAELC,eAAe,EAAE,CAACD,MAAD,EAASE,MAAT;EAFZ,CALiB;EAUxBC,IAAI,EAAE;IAAA,OAAO;MACXC,aAAa,EAAE,CADJ;MAEXC,gBAAgB,EAAE,CAFP;MAGXC,QAAQ,EAAE,KAHC;MAIXC,aAAa,EAAE,KAJJ;MAKXC,cAAc,EAAE,CALL;MAMXC,WAAW,EAAE,CANF;MAOXC,MAAM,EAAE;IAPG,CAAP;EAAA,CAVkB;EAoBxBC,QAAQ,EAAE;IACR;;;;AAIG;IACHC,SANQ,uBAMC;MACP,OAAO,OAAOC,MAAP,KAAkB,WAAzB;IAPM;;IASR;;;AAGG;IACHC,uBAbQ,qCAae;MACrB,OAAO,KAAKb,eAAL,GACHC,MAAM,CAAC,KAAKD,eAAN,CADH,GAEH,GAFJ;IAGD;EAjBO,CApBc;EAwCxBc,KAAK,EAAE;IACLR,aADK,2BACQ;MACX,KAAKE,WAAL,GAAmB,KAAKA,WAAL,IAAoB,KAAKL,aAA5C;IAFG;IAILE,QAJK,sBAIG;MACN,KAAKG,WAAL,GAAmB,CAAnB;IACD;EANI,CAxCiB;EAiDxBO,OAjDwB,qBAiDjB;IACL,IAAI,KAAKjB,YAAT,EAAuB;MACrB,KAAKW,MAAL,GAAcO,QAAQ,CAACC,aAAT,CAAuB,KAAKnB,YAA5B,CAAd;;MAEA,IAAI,CAAC,KAAKW,MAAV,EAAkB;QAChBjB,WAAW,oDAA6C,KAAKM,YAAlD,GAAkE,IAAlE,CAAX;MACD;IACF;EAxDqB;EA2DxBoB,OAAO,EAAE;IACPC,QADO,sBACC;MAAA;;MACN,IAAI,CAAC,KAAKR,SAAV,EAAqB;MAErB,KAAKJ,cAAL,GAAsB,KAAKJ,aAA3B;MACA,KAAKA,aAAL,GAAqB,KAAKM,MAAL,GACjB,KAAKA,MAAL,CAAYW,SADK,GAEjBR,MAAM,CAACS,WAFX;MAIA,KAAKf,aAAL,GAAqB,KAAKH,aAAL,GAAqB,KAAKI,cAA/C;MACA,KAAKH,gBAAL,GAAwBkB,IAAI,CAACC,GAAL,CAAS,KAAKpB,aAAL,GAAqB,KAAKU,uBAAnC,CAAxB;MAEA,KAAKW,SAAL,CAAe,YAAK;QAClB,IACEF,IAAI,CAACC,GAAL,CAAS,MAAKpB,aAAL,GAAqB,MAAKK,WAAnC,IACA,MAAKK,uBAFP,EAGE,MAAKY,YAAL;MAJJ;IAZK;;IAmBP;;;;AAIG;IACHA,YAxBO,0BAwBK,CAAkB;EAxBvB;AA3De,CAAX,CAAf","names":["Scroll","consoleWarn","Vue","extend","name","directives","props","scrollTarget","String","scrollThreshold","Number","data","currentScroll","currentThreshold","isActive","isScrollingUp","previousScroll","savedScroll","target","computed","canScroll","window","computedScrollThreshold","watch","mounted","document","querySelector","methods","onScroll","scrollTop","pageYOffset","Math","abs","$nextTick","thresholdMet"],"sourceRoot":"","sources":["../../../src/mixins/scrollable/index.ts"],"sourcesContent":["// Directives\nimport { Scroll } from '../../directives'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n/* @vue/component */\nexport default Vue.extend({\n  name: 'scrollable',\n\n  directives: { Scroll },\n\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number],\n  },\n\n  data: () => ({\n    currentScroll: 0,\n    currentThreshold: 0,\n    isActive: false,\n    isScrollingUp: false,\n    previousScroll: 0,\n    savedScroll: 0,\n    target: null as Element | null,\n  }),\n\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll (): boolean {\n      return typeof window !== 'undefined'\n    },\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold (): number {\n      return this.scrollThreshold\n        ? Number(this.scrollThreshold)\n        : 300\n    },\n  },\n\n  watch: {\n    isScrollingUp () {\n      this.savedScroll = this.savedScroll || this.currentScroll\n    },\n    isActive () {\n      this.savedScroll = 0\n    },\n  },\n\n  mounted () {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget)\n\n      if (!this.target) {\n        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this)\n      }\n    }\n  },\n\n  methods: {\n    onScroll () {\n      if (!this.canScroll) return\n\n      this.previousScroll = this.currentScroll\n      this.currentScroll = this.target\n        ? this.target.scrollTop\n        : window.pageYOffset\n\n      this.isScrollingUp = this.currentScroll < this.previousScroll\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold)\n\n      this.$nextTick(() => {\n        if (\n          Math.abs(this.currentScroll - this.savedScroll) >\n          this.computedScrollThreshold\n        ) this.thresholdMet()\n      })\n    },\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet () { /* noop */ },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}