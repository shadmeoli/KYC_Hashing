{"ast":null,"code":"import { parseTimestamp, getDayIdentifier, getTimestampIdentifier, isTimedless, updateHasTime } from './timestamp';\nexport function parseEvent(input, index, startProperty, endProperty) {\n  var timed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var category = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var startInput = input[startProperty];\n  var endInput = input[endProperty];\n  var startParsed = parseTimestamp(startInput, true);\n  var endParsed = endInput ? parseTimestamp(endInput, true) : startParsed;\n  var start = isTimedless(startInput) ? updateHasTime(startParsed, timed) : startParsed;\n  var end = isTimedless(endInput) ? updateHasTime(endParsed, timed) : endParsed;\n  var startIdentifier = getDayIdentifier(start);\n  var startTimestampIdentifier = getTimestampIdentifier(start);\n  var endIdentifier = getDayIdentifier(end);\n  var endOffset = start.hasTime ? 0 : 2359;\n  var endTimestampIdentifier = getTimestampIdentifier(end) + endOffset;\n  var allDay = !start.hasTime;\n  return {\n    input: input,\n    start: start,\n    startIdentifier: startIdentifier,\n    startTimestampIdentifier: startTimestampIdentifier,\n    end: end,\n    endIdentifier: endIdentifier,\n    endTimestampIdentifier: endTimestampIdentifier,\n    allDay: allDay,\n    index: index,\n    category: category\n  };\n}\nexport function isEventOn(event, dayIdentifier) {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier;\n}\nexport function isEventHiddenOn(event, day) {\n  return event.end.time === '00:00' && event.end.date === day.date && event.start.date !== day.date;\n}\nexport function isEventStart(event, day, dayIdentifier, firstWeekday) {\n  return dayIdentifier === event.startIdentifier || firstWeekday === day.weekday && isEventOn(event, dayIdentifier);\n}\nexport function isEventOverlapping(event, startIdentifier, endIdentifier) {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;\n}","map":{"version":3,"mappings":"AAAA,SACEA,cADF,EAEEC,gBAFF,EAGEC,sBAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,aANP;AASA,OAAM,SAAUC,UAAV,CACJC,KADI,EAEJC,KAFI,EAGJC,aAHI,EAIJC,WAJI,EAM4B;EAAA,IADhCC,KACgC,uEADxB,KACwB;EAAA,IAAhCC,QAAgC,uEAAL,KAAK;EAEhC,IAAMC,UAAU,GAAGN,KAAK,CAACE,aAAD,CAAxB;EACA,IAAMK,QAAQ,GAAGP,KAAK,CAACG,WAAD,CAAtB;EACA,IAAMK,WAAW,GAAsBd,cAAc,CAACY,UAAD,EAAa,IAAb,CAArD;EACA,IAAMG,SAAS,GAAuBF,QAAQ,GAAGb,cAAc,CAACa,QAAD,EAAW,IAAX,CAAjB,GAAoCC,WAAlF;EACA,IAAME,KAAK,GAAsBb,WAAW,CAACS,UAAD,CAAX,GAC7BR,aAAa,CAACU,WAAD,EAAcJ,KAAd,CADgB,GAE7BI,WAFJ;EAGA,IAAMG,GAAG,GAAsBd,WAAW,CAACU,QAAD,CAAX,GAC3BT,aAAa,CAACW,SAAD,EAAYL,KAAZ,CADc,GAE3BK,SAFJ;EAGA,IAAMG,eAAe,GAAWjB,gBAAgB,CAACe,KAAD,CAAhD;EACA,IAAMG,wBAAwB,GAAWjB,sBAAsB,CAACc,KAAD,CAA/D;EACA,IAAMI,aAAa,GAAWnB,gBAAgB,CAACgB,GAAD,CAA9C;EACA,IAAMI,SAAS,GAAWL,KAAK,CAACM,OAAN,GAAgB,CAAhB,GAAoB,IAA9C;EACA,IAAMC,sBAAsB,GAAWrB,sBAAsB,CAACe,GAAD,CAAtB,GAA8BI,SAArE;EACA,IAAMG,MAAM,GAAG,CAACR,KAAK,CAACM,OAAtB;EAEA,OAAO;IAAEhB,KAAF,EAAEA,KAAF;IAASU,KAAT,EAASA,KAAT;IAAgBE,eAAhB,EAAgBA,eAAhB;IAAiCC,wBAAjC,EAAiCA,wBAAjC;IAA2DF,GAA3D,EAA2DA,GAA3D;IAAgEG,aAAhE,EAAgEA,aAAhE;IAA+EG,sBAA/E,EAA+EA,sBAA/E;IAAuGC,MAAvG,EAAuGA,MAAvG;IAA+GjB,KAA/G,EAA+GA,KAA/G;IAAsHI;EAAtH,CAAP;AACD;AAED,OAAM,SAAUc,SAAV,CAAqBC,KAArB,EAAiDC,aAAjD,EAAsE;EAC1E,OAAOA,aAAa,IAAID,KAAK,CAACR,eAAvB,IAA0CS,aAAa,IAAID,KAAK,CAACN,aAAxE;AACD;AAED,OAAM,SAAUQ,eAAV,CAA2BF,KAA3B,EAAuDG,GAAvD,EAA6E;EACjF,OAAOH,KAAK,CAACT,GAAN,CAAUa,IAAV,KAAmB,OAAnB,IAA8BJ,KAAK,CAACT,GAAN,CAAUc,IAAV,KAAmBF,GAAG,CAACE,IAArD,IAA6DL,KAAK,CAACV,KAAN,CAAYe,IAAZ,KAAqBF,GAAG,CAACE,IAA7F;AACD;AAED,OAAM,SAAUC,YAAV,CAAwBN,KAAxB,EAAoDG,GAApD,EAA4EF,aAA5E,EAAmGM,YAAnG,EAAuH;EAC3H,OAAON,aAAa,KAAKD,KAAK,CAACR,eAAxB,IAA4Ce,YAAY,KAAKJ,GAAG,CAACK,OAArB,IAAgCT,SAAS,CAACC,KAAD,EAAQC,aAAR,CAA5F;AACD;AAED,OAAM,SAAUQ,kBAAV,CAA8BT,KAA9B,EAA0DR,eAA1D,EAAmFE,aAAnF,EAAwG;EAC5G,OAAOF,eAAe,IAAIQ,KAAK,CAACN,aAAzB,IAA0CA,aAAa,IAAIM,KAAK,CAACR,eAAxE;AACD","names":["parseTimestamp","getDayIdentifier","getTimestampIdentifier","isTimedless","updateHasTime","parseEvent","input","index","startProperty","endProperty","timed","category","startInput","endInput","startParsed","endParsed","start","end","startIdentifier","startTimestampIdentifier","endIdentifier","endOffset","hasTime","endTimestampIdentifier","allDay","isEventOn","event","dayIdentifier","isEventHiddenOn","day","time","date","isEventStart","firstWeekday","weekday","isEventOverlapping"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/util/events.ts"],"sourcesContent":["import {\n  parseTimestamp,\n  getDayIdentifier,\n  getTimestampIdentifier,\n  isTimedless,\n  updateHasTime,\n} from './timestamp'\nimport { CalendarTimestamp, CalendarEvent, CalendarEventParsed } from 'vuetify/types'\n\nexport function parseEvent (\n  input: CalendarEvent,\n  index: number,\n  startProperty: string,\n  endProperty: string,\n  timed = false,\n  category: string | false = false,\n): CalendarEventParsed {\n  const startInput = input[startProperty]\n  const endInput = input[endProperty]\n  const startParsed: CalendarTimestamp = parseTimestamp(startInput, true)\n  const endParsed: CalendarTimestamp = (endInput ? parseTimestamp(endInput, true) : startParsed)\n  const start: CalendarTimestamp = isTimedless(startInput)\n    ? updateHasTime(startParsed, timed)\n    : startParsed\n  const end: CalendarTimestamp = isTimedless(endInput)\n    ? updateHasTime(endParsed, timed)\n    : endParsed\n  const startIdentifier: number = getDayIdentifier(start)\n  const startTimestampIdentifier: number = getTimestampIdentifier(start)\n  const endIdentifier: number = getDayIdentifier(end)\n  const endOffset: number = start.hasTime ? 0 : 2359\n  const endTimestampIdentifier: number = getTimestampIdentifier(end) + endOffset\n  const allDay = !start.hasTime\n\n  return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index, category }\n}\n\nexport function isEventOn (event: CalendarEventParsed, dayIdentifier: number): boolean {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier\n}\n\nexport function isEventHiddenOn (event: CalendarEventParsed, day: CalendarTimestamp): boolean {\n  return event.end.time === '00:00' && event.end.date === day.date && event.start.date !== day.date\n}\n\nexport function isEventStart (event: CalendarEventParsed, day: CalendarTimestamp, dayIdentifier: number, firstWeekday: number): boolean {\n  return dayIdentifier === event.startIdentifier || (firstWeekday === day.weekday && isEventOn(event, dayIdentifier))\n}\n\nexport function isEventOverlapping (event: CalendarEventParsed, startIdentifier: number, endIdentifier: number): boolean {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier\n}\n"]},"metadata":{},"sourceType":"module"}