{"ast":null,"code":"import _classCallCheck from \"/home/elkimza/Documents/KYC_Hashing/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/elkimza/Documents/KYC_Hashing/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/elkimza/Documents/KYC_Hashing/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/elkimza/Documents/KYC_Hashing/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.concat.js\";\n// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport { getObjectValueByPath } from '../../util/helpers';\nimport { consoleError, consoleWarn } from '../../util/console';\nvar LANG_PREFIX = '$vuetify.';\nvar fallback = Symbol('Lang fallback');\n\nfunction getTranslation(locale, key) {\n  var usingDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var defaultLocale = arguments.length > 3 ? arguments[3] : undefined;\n  var shortKey = key.replace(LANG_PREFIX, '');\n  var translation = getObjectValueByPath(locale, shortKey, fallback);\n\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(\"Translation key \\\"\".concat(shortKey, \"\\\" not found in fallback\"));\n      translation = key;\n    } else {\n      consoleWarn(\"Translation key \\\"\".concat(shortKey, \"\\\" not found, falling back to default\"));\n      translation = getTranslation(defaultLocale, key, true, defaultLocale);\n    }\n  }\n\n  return translation;\n}\n\nexport var Lang = /*#__PURE__*/function (_Service) {\n  _inherits(Lang, _Service);\n\n  var _super = _createSuper(Lang);\n\n  function Lang(preset) {\n    var _this;\n\n    _classCallCheck(this, Lang);\n\n    _this = _super.call(this);\n    _this.defaultLocale = 'en';\n    var _preset$Lang$property = preset[Lang.property],\n        current = _preset$Lang$property.current,\n        locales = _preset$Lang$property.locales,\n        t = _preset$Lang$property.t;\n    _this.current = current;\n    _this.locales = locales;\n    _this.translator = t || _this.defaultTranslator;\n    return _this;\n  }\n\n  _createClass(Lang, [{\n    key: \"currentLocale\",\n    value: function currentLocale(key) {\n      var translation = this.locales[this.current];\n      var defaultLocale = this.locales[this.defaultLocale];\n      return getTranslation(translation, key, false, defaultLocale);\n    }\n  }, {\n    key: \"t\",\n    value: function t(key) {\n      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        params[_key - 1] = arguments[_key];\n      }\n\n      if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params);\n      return this.translator.apply(this, [key].concat(params));\n    }\n  }, {\n    key: \"defaultTranslator\",\n    value: function defaultTranslator(key) {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n\n      return this.replace(this.currentLocale(key), params);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(str, params) {\n      return str.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        /* istanbul ignore next */\n        return String(params[+index]);\n      });\n    }\n  }]);\n\n  return Lang;\n}(Service);\nLang.property = 'lang';","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,YAAxB,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,oBAA1C;AASA,IAAMC,WAAW,GAAG,WAApB;AACA,IAAMC,QAAQ,GAAGC,MAAM,CAAC,eAAD,CAAvB;;AAEA,SAASC,cAAT,CACEC,MADF,EAEEC,GAFF,EAI8B;EAAA,IAD5BC,YAC4B,uEADb,KACa;EAAA,IAA5BC,aAA4B;EAE5B,IAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAJ,CAAYT,WAAZ,EAAyB,EAAzB,CAAjB;EACA,IAAIU,WAAW,GAAGb,oBAAoB,CAACO,MAAD,EAASI,QAAT,EAAmBP,QAAnB,CAAtC;;EAEA,IAAIS,WAAW,KAAKT,QAApB,EAA8B;IAC5B,IAAIK,YAAJ,EAAkB;MAChBR,YAAY,6BAAqBU,QAArB,8BAAZ;MACAE,WAAW,GAAGL,GAAd;IAFF,OAGO;MACLN,WAAW,6BAAqBS,QAArB,2CAAX;MACAE,WAAW,GAAGP,cAAc,CAACI,aAAD,EAAgBF,GAAhB,EAAqB,IAArB,EAA2BE,aAA3B,CAA5B;IACD;EACF;;EAED,OAAOG,WAAP;AACD;;AAED,WAAaC,IAAb;EAAA;;EAAA;;EAWE,cAAaC,MAAb,EAAkC;IAAA;;IAAA;;IAChC;IAPK,sBAAgB,IAAhB;IASL,4BAIIA,MAAM,CAACD,IAAI,CAACE,QAAN,CAJV;IAAA,IACEC,OADF,yBACEA,OADF;IAAA,IAEEC,OAFF,yBAEEA,OAFF;IAAA,IAGEC,CAHF,yBAGEA,CAHF;IAMA,MAAKF,OAAL,GAAeA,OAAf;IACA,MAAKC,OAAL,GAAeA,OAAf;IACA,MAAKE,UAAL,GAAkBD,CAAC,IAAI,MAAKE,iBAA5B;IAXgC;EAYjC;;EAvBH;IAAA;IAAA,OAyBS,uBAAeb,GAAf,EAA0B;MAC/B,IAAMK,WAAW,GAAG,KAAKK,OAAL,CAAa,KAAKD,OAAlB,CAApB;MACA,IAAMP,aAAa,GAAG,KAAKQ,OAAL,CAAa,KAAKR,aAAlB,CAAtB;MAEA,OAAOJ,cAAc,CAACO,WAAD,EAAcL,GAAd,EAAmB,KAAnB,EAA0BE,aAA1B,CAArB;IACD;EA9BH;IAAA;IAAA,OAgCS,WAAGF,GAAH,EAAgC;MAAA,kCAAbc,MAAa;QAAbA,MAAa;MAAA;;MACrC,IAAI,CAACd,GAAG,CAACe,UAAJ,CAAepB,WAAf,CAAL,EAAkC,OAAO,KAAKS,OAAL,CAAaJ,GAAb,EAAkBc,MAAlB,CAAP;MAElC,OAAO,KAAKF,UAAL,cAAgBZ,GAAhB,SAAwBc,MAAxB,EAAP;IACD;EApCH;IAAA;IAAA,OAsCU,2BAAmBd,GAAnB,EAAgD;MAAA,mCAAbc,MAAa;QAAbA,MAAa;MAAA;;MACtD,OAAO,KAAKV,OAAL,CAAa,KAAKY,aAAL,CAAmBhB,GAAnB,CAAb,EAAsCc,MAAtC,CAAP;IACD;EAxCH;IAAA;IAAA,OA0CU,iBAASG,GAAT,EAAsBH,MAAtB,EAAmC;MACzC,OAAOG,GAAG,CAACb,OAAJ,CAAY,YAAZ,EAA0B,UAACc,KAAD,EAAgBC,KAAhB,EAAiC;QAChE;QACA,OAAOC,MAAM,CAACN,MAAM,CAAC,CAACK,KAAF,CAAP,CAAb;MAFK,EAAP;IAID;EA/CH;;EAAA;AAAA,EAA0B5B,OAA1B;AACSe,gBAAmB,MAAnB","names":["Service","getObjectValueByPath","consoleError","consoleWarn","LANG_PREFIX","fallback","Symbol","getTranslation","locale","key","usingDefault","defaultLocale","shortKey","replace","translation","Lang","preset","property","current","locales","t","translator","defaultTranslator","params","startsWith","currentLocale","str","match","index","String"],"sourceRoot":"","sources":["../../../src/services/lang/index.ts"],"sourcesContent":["// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { consoleError, consoleWarn } from '../../util/console'\n\n// Types\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyLocale,\n  Lang as ILang,\n} from 'vuetify/types/services/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (\n  locale: VuetifyLocale,\n  key: string,\n  usingDefault = false,\n  defaultLocale: VuetifyLocale\n): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(defaultLocale, key, true, defaultLocale)\n    }\n  }\n\n  return translation\n}\n\nexport class Lang extends Service implements ILang {\n  static property: 'lang' = 'lang'\n\n  public current: ILang['current']\n\n  public defaultLocale = 'en'\n\n  public locales: ILang['locales']\n\n  private translator: ILang['t']\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      current,\n      locales,\n      t,\n    } = preset[Lang.property]\n\n    this.current = current\n    this.locales = locales\n    this.translator = t || this.defaultTranslator\n  }\n\n  public currentLocale (key: string) {\n    const translation = this.locales[this.current]\n    const defaultLocale = this.locales[this.defaultLocale]\n\n    return getTranslation(translation, key, false, defaultLocale)\n  }\n\n  public t (key: string, ...params: any[]) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params)\n\n    return this.translator(key, ...params)\n  }\n\n  private defaultTranslator (key: string, ...params: any[]) {\n    return this.replace(this.currentLocale(key), params)\n  }\n\n  private replace (str: string, params: any[]) {\n    return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n      /* istanbul ignore next */\n      return String(params[+index])\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}