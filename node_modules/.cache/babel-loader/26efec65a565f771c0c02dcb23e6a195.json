{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { validateTimestamp, parseDate, DAYS_IN_WEEK, validateTime } from './timestamp';\nimport { CalendarEventOverlapModes } from '../modes';\nexport default {\n  base: {\n    start: {\n      type: [String, Number, Date],\n      validate: validateTimestamp,\n      \"default\": function _default() {\n        return parseDate(new Date()).date;\n      }\n    },\n    end: {\n      type: [String, Number, Date],\n      validate: validateTimestamp\n    },\n    weekdays: {\n      type: [Array, String],\n      \"default\": function _default() {\n        return [0, 1, 2, 3, 4, 5, 6];\n      },\n      validate: validateWeekdays\n    },\n    hideHeader: {\n      type: Boolean\n    },\n    shortWeekdays: {\n      type: Boolean,\n      \"default\": true\n    },\n    weekdayFormat: {\n      type: Function,\n      \"default\": null\n    },\n    dayFormat: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      \"default\": 7\n    },\n    shortIntervals: {\n      type: Boolean,\n      \"default\": true\n    },\n    intervalHeight: {\n      type: [Number, String],\n      \"default\": 48,\n      validate: validateNumber\n    },\n    intervalWidth: {\n      type: [Number, String],\n      \"default\": 60,\n      validate: validateNumber\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      \"default\": 60,\n      validate: validateNumber\n    },\n    firstInterval: {\n      type: [Number, String],\n      \"default\": 0,\n      validate: validateNumber\n    },\n    firstTime: {\n      type: [Number, String, Object],\n      validate: validateTime\n    },\n    intervalCount: {\n      type: [Number, String],\n      \"default\": 24,\n      validate: validateNumber\n    },\n    intervalFormat: {\n      type: Function,\n      \"default\": null\n    },\n    intervalStyle: {\n      type: Function,\n      \"default\": null\n    },\n    showIntervalLabel: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  weeks: {\n    localeFirstDayOfYear: {\n      type: [String, Number],\n      \"default\": 0\n    },\n    minWeeks: {\n      validate: validateNumber,\n      \"default\": 1\n    },\n    shortMonths: {\n      type: Boolean,\n      \"default\": true\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      \"default\": true\n    },\n    showWeek: Boolean,\n    monthFormat: {\n      type: Function,\n      \"default\": null\n    }\n  },\n  calendar: {\n    type: {\n      type: String,\n      \"default\": 'month'\n    },\n    value: {\n      type: [String, Number, Date],\n      validate: validateTimestamp\n    }\n  },\n  category: {\n    categories: {\n      type: [Array, String],\n      \"default\": ''\n    },\n    categoryText: {\n      type: [String, Function]\n    },\n    categoryHideDynamic: {\n      type: Boolean\n    },\n    categoryShowAll: {\n      type: Boolean\n    },\n    categoryForInvalid: {\n      type: String,\n      \"default\": ''\n    },\n    categoryDays: {\n      type: [Number, String],\n      \"default\": 1,\n      validate: function validate(x) {\n        return isFinite(parseInt(x)) && parseInt(x) > 0;\n      }\n    }\n  },\n  events: {\n    events: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    eventStart: {\n      type: String,\n      \"default\": 'start'\n    },\n    eventEnd: {\n      type: String,\n      \"default\": 'end'\n    },\n    eventTimed: {\n      type: [String, Function],\n      \"default\": 'timed'\n    },\n    eventCategory: {\n      type: [String, Function],\n      \"default\": 'category'\n    },\n    eventHeight: {\n      type: Number,\n      \"default\": 20\n    },\n    eventColor: {\n      type: [String, Function],\n      \"default\": 'primary'\n    },\n    eventTextColor: {\n      type: [String, Function],\n      \"default\": 'white'\n    },\n    eventName: {\n      type: [String, Function],\n      \"default\": 'name'\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      \"default\": 60\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      \"default\": 'stack',\n      validate: function validate(mode) {\n        return mode in CalendarEventOverlapModes || typeof mode === 'function';\n      }\n    },\n    eventMore: {\n      type: Boolean,\n      \"default\": true\n    },\n    eventMoreText: {\n      type: String,\n      \"default\": '$vuetify.calendar.moreEvents'\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      \"default\": null\n    },\n    eventMarginBottom: {\n      type: Number,\n      \"default\": 1\n    }\n  }\n};\nexport function validateNumber(input) {\n  return isFinite(parseInt(input));\n}\nexport function validateWeekdays(input) {\n  if (typeof input === 'string') {\n    input = input.split(',');\n  }\n\n  if (Array.isArray(input)) {\n    var ints = input.map(function (x) {\n      return parseInt(x);\n    });\n\n    if (ints.length > DAYS_IN_WEEK || ints.length === 0) {\n      return false;\n    }\n\n    var visited = {};\n    var wrapped = false;\n\n    for (var i = 0; i < ints.length; i++) {\n      var x = ints[i];\n\n      if (!isFinite(x) || x < 0 || x >= DAYS_IN_WEEK) {\n        return false;\n      }\n\n      if (i > 0) {\n        var d = x - ints[i - 1];\n\n        if (d < 0) {\n          if (wrapped) {\n            return false;\n          }\n\n          wrapped = true;\n        } else if (d === 0) {\n          return false;\n        }\n      }\n\n      if (visited[x]) {\n        return false;\n      }\n\n      visited[x] = true;\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"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","names":["validateTimestamp","parseDate","DAYS_IN_WEEK","validateTime","CalendarEventOverlapModes","base","start","type","String","Number","Date","validate","date","end","weekdays","Array","validateWeekdays","hideHeader","Boolean","shortWeekdays","weekdayFormat","Function","dayFormat","intervals","maxDays","shortIntervals","intervalHeight","validateNumber","intervalWidth","intervalMinutes","firstInterval","firstTime","Object","intervalCount","intervalFormat","intervalStyle","showIntervalLabel","weeks","localeFirstDayOfYear","minWeeks","shortMonths","showMonthOnFirst","showWeek","monthFormat","calendar","value","category","categories","categoryText","categoryHideDynamic","categoryShowAll","categoryForInvalid","categoryDays","isFinite","parseInt","x","events","eventStart","eventEnd","eventTimed","eventCategory","eventHeight","eventColor","eventTextColor","eventName","eventOverlapThreshold","eventOverlapMode","mode","eventMore","eventMoreText","eventRipple","eventMarginBottom","input","split","isArray","ints","map","length","visited","wrapped","i","d"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/util/props.ts"],"sourcesContent":["\nimport { validateTimestamp, parseDate, DAYS_IN_WEEK, validateTime } from './timestamp'\nimport { PropType } from 'vue'\nimport { CalendarEvent, CalendarFormatter, CalendarTimestamp, CalendarEventOverlapMode, CalendarEventNameFunction, CalendarEventColorFunction, CalendarEventCategoryFunction, CalendarEventTimedFunction, CalendarCategoryTextFunction, CalendarCategory } from 'vuetify/types'\nimport { CalendarEventOverlapModes } from '../modes'\nimport { PropValidator } from 'vue/types/options'\n\nexport default {\n  base: {\n    start: {\n      type: [String, Number, Date],\n      validate: validateTimestamp,\n      default: () => parseDate(new Date()).date,\n    },\n    end: {\n      type: [String, Number, Date],\n      validate: validateTimestamp,\n    },\n    weekdays: {\n      type: [Array, String] as PropType<number[] | string>,\n      default: () => [0, 1, 2, 3, 4, 5, 6],\n      validate: validateWeekdays,\n    },\n    hideHeader: {\n      type: Boolean,\n    },\n    shortWeekdays: {\n      type: Boolean,\n      default: true,\n    },\n    weekdayFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n    dayFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      default: 7,\n    },\n    shortIntervals: {\n      type: Boolean,\n      default: true,\n    },\n    intervalHeight: {\n      type: [Number, String],\n      default: 48,\n      validate: validateNumber,\n    },\n    intervalWidth: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber,\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber,\n    },\n    firstInterval: {\n      type: [Number, String],\n      default: 0,\n      validate: validateNumber,\n    },\n    firstTime: {\n      type: [Number, String, Object],\n      validate: validateTime,\n    },\n    intervalCount: {\n      type: [Number, String],\n      default: 24,\n      validate: validateNumber,\n    },\n    intervalFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n    intervalStyle: {\n      type: Function as PropType<(interval: CalendarTimestamp) => object>,\n      default: null,\n    },\n    showIntervalLabel: {\n      type: Function as PropType<(interval: CalendarTimestamp) => boolean>,\n      default: null,\n    },\n  },\n  weeks: {\n    localeFirstDayOfYear: {\n      type: [String, Number],\n      default: 0,\n    },\n    minWeeks: {\n      validate: validateNumber,\n      default: 1,\n    },\n    shortMonths: {\n      type: Boolean,\n      default: true,\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      default: true,\n    },\n    showWeek: Boolean,\n    monthFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n  },\n  calendar: {\n    type: {\n      type: String,\n      default: 'month',\n    },\n    value: {\n      type: [String, Number, Date] as PropType<string | number | Date>,\n      validate: validateTimestamp,\n    },\n  },\n  category: {\n    categories: {\n      type: [Array, String] as PropType<CalendarCategory[] | string>,\n      default: '',\n    },\n    categoryText: {\n      type: [String, Function] as PropType<string | CalendarCategoryTextFunction>,\n    },\n    categoryHideDynamic: {\n      type: Boolean,\n    },\n    categoryShowAll: {\n      type: Boolean,\n    },\n    categoryForInvalid: {\n      type: String,\n      default: '',\n    },\n    categoryDays: {\n      type: [Number, String],\n      default: 1,\n      validate: (x: any) => isFinite(parseInt(x)) && parseInt(x) > 0,\n    },\n  },\n  events: {\n    events: {\n      type: Array,\n      default: () => [],\n    } as PropValidator<CalendarEvent[]>,\n    eventStart: {\n      type: String,\n      default: 'start',\n    },\n    eventEnd: {\n      type: String,\n      default: 'end',\n    },\n    eventTimed: {\n      type: [String, Function] as PropType<string | CalendarEventTimedFunction>,\n      default: 'timed',\n    },\n    eventCategory: {\n      type: [String, Function] as PropType<string | CalendarEventCategoryFunction>,\n      default: 'category',\n    },\n    eventHeight: {\n      type: Number,\n      default: 20,\n    },\n    eventColor: {\n      type: [String, Function] as PropType<string | CalendarEventColorFunction>,\n      default: 'primary',\n    },\n    eventTextColor: {\n      type: [String, Function] as PropType<string | CalendarEventColorFunction>,\n      default: 'white',\n    },\n    eventName: {\n      type: [String, Function] as PropType<string | CalendarEventNameFunction>,\n      default: 'name',\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      default: 60,\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      default: 'stack',\n      validate: (mode: any) => mode in CalendarEventOverlapModes || typeof mode === 'function',\n    } as PropValidator<'stack' | 'column' | CalendarEventOverlapMode>,\n    eventMore: {\n      type: Boolean,\n      default: true,\n    },\n    eventMoreText: {\n      type: String,\n      default: '$vuetify.calendar.moreEvents',\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      default: null,\n    },\n    eventMarginBottom: {\n      type: Number,\n      default: 1,\n    },\n  },\n}\n\nexport function validateNumber (input: any): boolean {\n  return isFinite(parseInt(input))\n}\n\nexport function validateWeekdays (input: string | (number | string)[]): boolean {\n  if (typeof input === 'string') {\n    input = input.split(',')\n  }\n\n  if (Array.isArray(input)) {\n    const ints = input.map(x => parseInt(x))\n\n    if (ints.length > DAYS_IN_WEEK || ints.length === 0) {\n      return false\n    }\n\n    const visited: Record<number, boolean> = {}\n    let wrapped = false\n\n    for (let i = 0; i < ints.length; i++) {\n      const x = ints[i]\n\n      if (!isFinite(x) || x < 0 || x >= DAYS_IN_WEEK) {\n        return false\n      }\n\n      if (i > 0) {\n        const d = x - ints[i - 1]\n        if (d < 0) {\n          if (wrapped) {\n            return false\n          }\n          wrapped = true\n        } else if (d === 0) {\n          return false\n        }\n      }\n\n      if (visited[x]) {\n        return false\n      }\n      visited[x] = true\n    }\n\n    return true\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}