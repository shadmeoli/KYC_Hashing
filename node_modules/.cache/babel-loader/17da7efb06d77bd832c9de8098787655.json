{"ast":null,"code":"import \"core-js/modules/es.parse-int.js\";\n\nfunction _int(value) {\n  return parseInt(value, 10);\n}\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\n\n\nexport function checkCollinear(p0, p1, p2) {\n  return _int(p0.x + p2.x) === _int(2 * p1.x) && _int(p0.y + p2.y) === _int(2 * p1.y);\n}\nexport function getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\nexport function moveTo(to, from, radius) {\n  var vector = {\n    x: to.x - from.x,\n    y: to.y - from.y\n  };\n  var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  var unitVector = {\n    x: vector.x / length,\n    y: vector.y / length\n  };\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius\n  };\n}","map":{"version":3,"mappings":";;AAEA,SAASA,IAAT,CAAcC,KAAd,EAAoC;EAClC,OAAOC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAAf;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAUE,cAAV,CAA0BC,EAA1B,EAAqCC,EAArC,EAAgDC,EAAhD,EAAyD;EAC7D,OAAON,IAAG,CAACI,EAAE,CAACG,CAAH,GAAOD,EAAE,CAACC,CAAX,CAAH,KAAqBP,IAAG,CAAC,IAAIK,EAAE,CAACE,CAAR,CAAxB,IAAsCP,IAAG,CAACI,EAAE,CAACI,CAAH,GAAOF,EAAE,CAACE,CAAX,CAAH,KAAqBR,IAAG,CAAC,IAAIK,EAAE,CAACG,CAAR,CAArE;AACD;AAED,OAAM,SAAUC,WAAV,CAAuBJ,EAAvB,EAAkCC,EAAlC,EAA2C;EAC/C,OAAOI,IAAI,CAACC,IAAL,CACLD,IAAI,CAACE,GAAL,CAASN,EAAE,CAACC,CAAH,GAAOF,EAAE,CAACE,CAAnB,EAAsB,CAAtB,IAA2BG,IAAI,CAACE,GAAL,CAASN,EAAE,CAACE,CAAH,GAAOH,EAAE,CAACG,CAAnB,EAAsB,CAAtB,CADtB,CAAP;AAGD;AAED,OAAM,SAAUK,MAAV,CAAkBC,EAAlB,EAA6BC,IAA7B,EAA0CC,MAA1C,EAAwD;EAC5D,IAAMC,MAAM,GAAG;IAAEV,CAAC,EAAEO,EAAE,CAACP,CAAH,GAAOQ,IAAI,CAACR,CAAjB;IAAoBC,CAAC,EAAEM,EAAE,CAACN,CAAH,GAAOO,IAAI,CAACP;EAAnC,CAAf;EACA,IAAMU,MAAM,GAAGR,IAAI,CAACC,IAAL,CAAWM,MAAM,CAACV,CAAP,GAAWU,MAAM,CAACV,CAAlB,GAAwBU,MAAM,CAACT,CAAP,GAAWS,MAAM,CAACT,CAArD,CAAf;EACA,IAAMW,UAAU,GAAG;IAAEZ,CAAC,EAAEU,MAAM,CAACV,CAAP,GAAWW,MAAhB;IAAwBV,CAAC,EAAES,MAAM,CAACT,CAAP,GAAWU;EAAtC,CAAnB;EAEA,OAAO;IACLX,CAAC,EAAEQ,IAAI,CAACR,CAAL,GAASY,UAAU,CAACZ,CAAX,GAAeS,MADtB;IAELR,CAAC,EAAEO,IAAI,CAACP,CAAL,GAASW,UAAU,CAACX,CAAX,GAAeQ;EAFtB,CAAP;AAID","names":["int","value","parseInt","checkCollinear","p0","p1","p2","x","y","getDistance","Math","sqrt","pow","moveTo","to","from","radius","vector","length","unitVector"],"sourceRoot":"","sources":["../../../../src/components/VSparkline/helpers/math.ts"],"sourcesContent":["import { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}